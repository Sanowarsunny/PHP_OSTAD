Database query:

CREATE TABLE customers (
    customerID BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    location VARCHAR(255) NOT NULL,
    
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP()
);
CREATE TABLE Orders (
    orderID BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    customerID BIGINT(20) UNSIGNED NOT NULL,
    orderDate DATE NOT NULL,
    totalAmount DECIMAL(10, 2) NOT NULL,
    
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
    
    FOREIGN KEY (customerID) REFERENCES Customers(customerID)
);
CREATE TABLE Categories (
    categoryID BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP()
);
CREATE TABLE Products (
    productID BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    categoryID BIGINT(20) UNSIGNED NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
    FOREIGN KEY (categoryID) REFERENCES Categories(categoryID)
);
CREATE TABLE Order_Items (
    orderItemID BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    orderID BIGINT(20) UNSIGNED NOT NULL,
    productID BIGINT(20) UNSIGNED NOT NULL,
    quantity INT NOT NULL,
    unitPrice DECIMAL(10, 2) NOT NULL,
    
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
    
    FOREIGN KEY (orderID) REFERENCES Orders(orderID),
    FOREIGN KEY (productID) REFERENCES Products(productID)
    
);



Tasks:

   ***Write a SQL query to retrieve all the customer information along with the total number of orders placed by each customer. Display the result in descending order of the number of orders.

        
        SELECT
            C.customerID,
            C.name AS Customer_Name,
            C.email AS Customer_Email,
            C.location AS Customer_Location,
            COUNT(O.orderID) AS number_Orders
        FROM Customers AS C
        LEFT JOIN Orders AS O ON C.customerID = O.customerID
        GROUP BY C.customerID
        ORDER BY number_Orders DESC;



    ***Write a SQL query to retrieve the product name, quantity, and total amount for each order item. Display the result in ascending order of the order ID.

        
        SELECT
            o.orderID,
            p.name AS Product_Name,
            oi.quantity,
            oi.unitPrice * oi.quantity AS Total_Amount
        FROM order_items AS oi
        INNER JOIN orders AS o ON oi.orderID = o.orderID
        INNER JOIN products AS p ON oi.productID = p.productID

        ORDER BY o.orderID ASC;



    ***Write a SQL query to retrieve the total revenue generated by each product category. Display the category name along with the total revenue in descending order of the revenue.

        
        SELECT 
            c.name AS Category_Name,
            SUM(p.price * oi.quantity) AS Total_Revenue
        FROM categories AS c 

        INNER JOIN products as p ON c.categoryID = p.categoryID
        LEFT JOIN order_items as oi ON p.productID = oi.productID

        GROUP BY c.categoryID, c.name
        ORDER BY Total_Revenue DESC;


    ***Write a SQL query to retrieve the top 5 customers who have made the highest total purchase amount. Display the customer name along with the total purchase amount in descending order of the purchase amount.

        SELECT
            C.customerID,
            C.name AS Customer_Name,
            SUM(O.totalAmount) AS Total_Purchase_Amount
        FROM Customers AS C
        INNER JOIN Orders AS O ON C.customerID = O.customerID
        GROUP BY C.customerID, C.name
        ORDER BY Total_Purchase_Amount DESC
        LIMIT 5;


